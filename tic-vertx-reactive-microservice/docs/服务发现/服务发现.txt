服务发现：
    在微服务架构中，每个组件都是独立的，它们都不知道其他组件的位置，但是组件之间又需要通信，因此我们必须知道各个组件的位置。
然而，把位置信息写死在代码中显然不好，因此我们需要一种机制可以动态地记录每个组件的位置——这就是服务发现。有了服务发现模块，
我们就可以将服务位置发布至服务发现模块中，其它服务就可以从服务发现模块中获取想要调用的服务的位置并进行调用。在调用服务的过程中，
我们不需要知道对应服务的位置，所以当服务位置或环境变动时，服务调用可以不受影响，这使得我们的架构更加灵活。


服务发现有两种模式：客户端发现、服务端发现
1. 客户端发现模式
    客户端负责决定相应服务实例的网络位置，并且对请求实现负载均衡。这句话的意思是，客户端从一个服务注册中心查询服务，从中能查询到
    所有可用服务实例的库，客户端使用负载均衡算法从多个服务实例中选择一个，然后发出请求。

    服务实例的网络位置是在启动时注册到服务注册表中，并且在服务终止时从注册表中删除。服务实例注册信息一般是使用心跳机制来定期刷新的。

    Netflix OSS提供了一种非常棒的客户端发现模式。Netflix Eureka是一个服务注册表，为服务实例注册管理和查询可用实例提供了REST API接口。
    Netflix Ribbon是一种IPC客户端，与Eureka合同工作实现对请求的负载均衡。我们会在后面详细讨论Eureka。

    客户端发现模式也是优缺点分明。这种模式相对比较直接，而且除了服务注册表，没有其它改变的因素。除此之外，因为客户端知道可用服务注册表信息，
    因此客户端可以通过使用哈希一致性（hashing consistently）变得更加聪明，更加有效的负载均衡。

    而这种模式一个最大的缺点是需要针对不同的编程语言注册不同的服务，在客户端需要为每种语言开发不同的服务发现逻辑。

2. 服务端发现模式


https://studygolang.com/articles/6266
http://www.primeton.com/read.php?id=2269&his=1
https://www.tuicool.com/articles/fA7rYjA
