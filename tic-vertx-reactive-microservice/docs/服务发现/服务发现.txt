服务发现：
    在微服务架构中，每个组件都是独立的，它们都不知道其他组件的位置，但是组件之间又需要通信，因此我们必须知道各个组件的位置。
然而，把位置信息写死在代码中显然不好，因此我们需要一种机制可以动态地记录每个组件的位置——这就是服务发现。有了服务发现模块，
我们就可以将服务位置发布至服务发现模块中，其它服务就可以从服务发现模块中获取想要调用的服务的位置并进行调用。在调用服务的过程中，
我们不需要知道对应服务的位置，所以当服务位置或环境变动时，服务调用可以不受影响，这使得我们的架构更加灵活。


服务发现有两种模式：客户端发现、服务端发现
1. 客户端发现模式
    客户端负责决定相应服务实例的网络位置，并且对请求实现负载均衡。这句话的意思是，客户端从一个服务注册中心查询服务，从中能查询到
    所有可用服务实例的库，客户端使用负载均衡算法从多个服务实例中选择一个，然后发出请求。

    服务实例的网络位置是在启动时注册到服务注册表中，并且在服务终止时从注册表中删除。服务实例注册信息一般是使用心跳机制来定期刷新的。

    Netflix OSS提供了一种非常棒的客户端发现模式。Netflix Eureka是一个服务注册表，为服务实例注册管理和查询可用实例提供了REST API接口。
    Netflix Ribbon是一种IPC客户端，与Eureka合同工作实现对请求的负载均衡。我们会在后面详细讨论Eureka。

    客户端发现模式也是优缺点分明。这种模式相对比较直接，而且除了服务注册表，没有其它改变的因素。除此之外，因为客户端知道可用服务注册表信息，
    因此客户端可以通过使用哈希一致性（hashing consistently）变得更加聪明，更加有效的负载均衡。

    而这种模式一个最大的缺点是需要针对不同的编程语言注册不同的服务，在客户端需要为每种语言开发不同的服务发现逻辑。

2. 服务端发现模式


3. Vert.x服务发现基础组件（Vert.x Service Discovery）
    3.1 用来发布和发现各种类型的资源，比如服务代理、HTTP端点（endpoint）、数据源（data source）等。这些资源都可以称为服务。
        服务就是一个可以被发现和访问的功能，可以通过它的类型、元数据和未知来进行描述。在Vert.x服务发现组件中，通过`Record`
        来描述每个服务。
    3.2 服务提供者
        a、发布一个服务记录（Record）
        b、将已经发布的服务记录注销
        c、更新已发布服务记录的状态（下线、服务暂停等）
    3.3 服务消费者
        a、查找各种服务
        b、绑定到某个服务（它所获取到的`ServiceReference`）并且使用这个服务
        c、当使用完成后，释放绑定的服务
        d、监听服务的上线、下线和状态变更的消息
    3.4 消费者访问服务的步骤
        a、查找满足它需求的服务记录
        b、取得可访问的`ServiceReference`
        c、通过服务对象来访问服务
        d、一旦使用完后释放服务对象
        注意：
        1. 如果知道服务的类型（JDBC客户端、HTTP客户端），整个过程就可以简化为通过服务类型直接获取服务对象。
        2. 服务提供者和消费者，必须创建它们自己的`ServiceDiscovery`实例，这些实例通过底层的分布式数据结构来协同保持服务集合的同步。
        3. 服务发现组件支持桥接的方式，来从其它服务发现技术中导入和到处服务。//TODO

    3.5 服务事件
        每当发布或回收服务时，`Event Bus`中都会触发一个事件，这个事件包含着被修改的服务记录。每当通过`getReference`方法获取一个服务
        引用或者通过`release`方法释放一个服务引用时，都会有事件发送到`Event Bus`中，用来跟踪服务的使用情况。//TODO

    3.6 服务存储后端
        服务发现组件使用`Vert.x`的分布式数据结构来存储服务记录。所以，集群中所有的成员都可以访问到所有的服务记录，这是服务后端的默认
        实现。你也可以实现自己的服务记录存储后端，只要实现`ServiceDiscoveryBackend`接口就可以了。比如，Vert.x还通过实现该接口提供了
        基于Redis的存储后端。//TODO，



https://studygolang.com/articles/6266
http://www.primeton.com/read.php?id=2269&his=1
https://www.tuicool.com/articles/fA7rYjA




























