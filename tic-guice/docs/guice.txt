注入（Injection）
绑定（Binding）
作用域/生命周期（Scope）


2. Spring的不足
    手动wire：配置太过庞大
    自动wire：复杂项目无法实现

3. Guice的不同
    取消xml
    取消bean的概念
    使用constructor注入，好处：不需要getter，setter，成员变量可以设置为final，依赖更加突出和明显，getter setter方式比较模糊
    支持泛型
    是一个专注于DI的框架
    

4. Guice的注入，除了可以在构造器上，也可以在成员变量上，都是通过@Inject注解来实现。
   但是成员变量的注入是不提倡的，除非在一些测试用例中，为了快速达到测试的目的，才通过成员变量来注入。

   那为什么要使用构造函数注入呢？因为这其实是一个很合理的地方。就比如我们的一个模块要运行，需要很多的dependency来支持。

5. 绑定
    5.1 类名绑定
        bind(接口.class).to(实现类.class);
    5.2 实例绑定
        bind(接口.class).toInstance(new Instance())
    5.3 连接绑定
        bind(接口.class).to(实现类1.class);       //但是这个实现类没有做任何实现，仅仅是抛出UnsupportedOperationException，显然不对
        // 这个时候可以把这个实现类再连接给另外一个实现类
        bind(实现类1.class).toInstance(new Instance(){
            //...业务代码
        });

        //这个时候我们就把接口实际上绑定到了toInstance中的实现类上，这就是连接绑定
        // 有什么用呢？

    5.4 Provider绑定

    5.5 命名绑定，在@Provides后面加上一个自定义的@注解，然后实现命名绑定，当然也可以通过加上@Named("命名")来实现绑定

    5.6 泛型绑定
        Java的泛型是一种假泛型，所以你不能像如下一样去绑定
        bind(List<String>.class)，这样是编译不过去的，需要使用Guice的TypeLiteral
        bind(new TypeLiteral<List<String>>(){}).toInstance(Arrays.asList("CNY", "EUR", "USD"));

    5.7 集合绑定



6. Guice在绑定的时候是不理会函数名的，只关注@注解 + 返回值


7. 模块的组织
    7.1 并列
        Guice.createInjector(module1, module2, ...)

    7.2 嵌套
        大module套小module，利用install(module)

    7.3 覆盖
        一个module里面的东西，可能会被另外一个module里面的东西覆盖掉
        Modules.override(module1).with(module2)

8. Guice的启动
    Module何时被运行？
    - Module里存放了很多表达式
    - Module不被“运行”
    - Guice.createInjector()时记录所有表达式
    - createInjector做了什么事情？
        - 记录了bind().to()的关系，这种映射关系被保存在一个map中，但是还没有创建真正的实例
        - 记录了@Provides等注解的一个函数的关键字，保存在Guice中，还没有创建真正的实例

    系统何时初始化
    - 没有“初始化”的概念，没有Spring的Configuration Time
    - injector.getInstance()时根据表达式调用构造函数

技巧点：
    1. 没有实现的代码，直接throw new UnsupportedOperationException(); 防止一些测试性的代码交付到生产环境造成危害。

